services:
  # Application Backend
  app:
    env_file:
      - .env.prod
    build:
      context: .
      dockerfile: Dockerfile
    container_name: carden-app
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: carden_prod
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis
      # REDIS_HOST: redis
      # REDIS_PORT: 6379
      # REDIS_PASSWORD: ${REDIS_PASSWORD}
      
      # JWT
      JWT_SECRET: ${JWT_SECRET}
      
      # Email
      MAIL_HOST: ${MAIL_HOST}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      
      # Application
      SPRING_PROFILES_ACTIVE: prod
      
      # Python AI Service
      PYTHON_SERVICE_URL: http://carden-ai-service:8001
      PYTHON_SERVICE_ENABLED: true
      
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/var/log/carden
    networks:
      - carden-network
    depends_on:
      postgres:
        condition: service_healthy
      carden-ai-service:
        condition: service_healthy
      # redis:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Python AI Card Generation Service
  carden-ai-service:
    env_file:
      - .env.prod
    build:
    
      context: ./python-modules
      dockerfile: Dockerfile
    container_name: carden-ai-service
    restart: unless-stopped
    environment:
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      DATABASE_URL: postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/carden_prod
      LOG_LEVEL: INFO
    ports:
      - "8001:8001"
    networks:
      - carden-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database
  postgres:
    env_file:
      - .env.prod
    image: postgres:15-alpine
    container_name: carden-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: carden_prod
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
    networks:
      - carden-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d carden_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis Cache
  # redis:
  #   image: redis:7-alpine
  #   container_name: carden-redis-prod
  #   restart: unless-stopped
  #   command: >
  #     redis-server
  #     --requirepass ${REDIS_PASSWORD}
  #     --appendonly yes
  #     --appendfsync everysec
  #     --maxmemory 512mb
  #     --maxmemory-policy allkeys-lru
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - carden-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
  #     interval: 10s
  #     timeout: 3s
  #     retries: 5

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: carden-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - carden-network
    depends_on:
      app:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  # redis_data:
  #   driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  carden-network:
    driver: bridge
